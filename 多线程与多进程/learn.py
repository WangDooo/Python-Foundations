#================================================================
# 
#----------------------------------------------------------------
'''
并不是使用的线程数量越多越好，如果线程太多，线程调度带来的开销可能会比线程实际执行的开销还要大
'''
#----------------------------------------------------------------


#=======threading模块=========================================================
# threading.active_count() 返回处于alive状态的Thread对象数量
# threading.current_thread() 返回当前Thread对象
# threading.get_ident() 返回当前线程的线程标识符
# threading.enumerate() 返回处于alive状态的所有Thread对象列表
# threading.main_thread() 返回主线程对象
# threading.stack_size([size]) 返回创建线程是的栈的大小
#----------------------------------------------------------------
# import threading

# print(threading.stack_size())
# print(threading.active_count())
# print(threading.current_thread())
# print(threading.enumerate())
#----------------------------------------------------------------


#=======Thread对象========================================================
# Thread类支持使用两种方法来创建线程
# 1. 为构造函数传递一个可调用对象
# 2. 继承Thread类并在派生类中重写__init__() 和 run()方法
# 创建线程对象以后，使用start()启动，该方法会自动调用该类对象的run()方法，此时线程出入alive状态，直至run()方法运行结束
#----------------------------------------------------------------

# start() 自动调用run()方法，启动线程，执行线程代码
# run() 线程代码
# __init__(self,group=None,target=None,name=None,args=(),kwargs=None,verbose=None) 构造函数
# name 读取或设置线程名字
# ident 线程标识
# is_alive() isAlive()
# daemon 布尔值，表示线程是否为守护线程
# join(timeout=None) 等待线程结束或超时返回

#----------------------------------------------------------------


#=========join([timeout])=======================================================
# 阻塞当前线程，等待被调线程结束或超时后再继续执行当前线程的后续代码，timeout指定最长等待时间，单位为秒
#----------------------------------------------------------------
# import threading
# import time

# def func1(x, y):
# 	for i in range(x, y):
# 		print(i, end='')
# 	time.sleep(10)

# t1 = threading.Thread(target=func1, args=(15,20))
# t1.start()
# t1.join(10) # 相当于给t1自己单独的10秒钟时间
# t2 = threading.Thread(target=func1, args=(5,10))
# t2.start()

#----------------------------------------------------------------


#=========isAlive()=======================================================
# 
#----------------------------------------------------------------
# import threading
# import time

# def func1(x, y):
# 	for i in range(x, y):
# 		print(i, end='')
# 	time.sleep(10)

# t1 = threading.Thread(target=func1, args=(15,20))
# t1.start()
# t1.join(10) # 相当于给t1自己单独的10秒钟时间
# t2 = threading.Thread(target=func1, args=(5,10))
# t2.start()
# t2.join()
# print('t1:', t1.isAlive())
# print('t2:', t2.isAlive())
#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------