#================================================================
# 
#----------------------------------------------------------------
'''
并不是使用的线程数量越多越好，如果线程太多，线程调度带来的开销可能会比线程实际执行的开销还要大
'''
#----------------------------------------------------------------


#=======threading模块=========================================================
# threading.active_count() 返回处于alive状态的Thread对象数量
# threading.current_thread() 返回当前Thread对象
# threading.get_ident() 返回当前线程的线程标识符
# threading.enumerate() 返回处于alive状态的所有Thread对象列表
# threading.main_thread() 返回主线程对象
# threading.stack_size([size]) 返回创建线程是的栈的大小
#----------------------------------------------------------------
# import threading

# print(threading.stack_size())
# print(threading.active_count())
# print(threading.current_thread())
# print(threading.enumerate())
#----------------------------------------------------------------


#=======Thread对象========================================================
# Thread类支持使用两种方法来创建线程
# 1. 为构造函数传递一个可调用对象
# 2. 继承Thread类并在派生类中重写__init__() 和 run()方法
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------