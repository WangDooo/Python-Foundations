#=======类的定义与使用=========================================================
# isinstance() 测试一个对象是否为某个类的实例 
# pass 空位
# self参数
# types.MethodType 把一个函数变为一个方法 动态地添加到实例上
# 函数和方法的区别：
# 方法一般指与特定实例绑定的函数，通过对象调用方法时，对象本身将作为第一个参数传递过去，普通函数并不具备这个特点
#----------------------------------------------------------------
# class Car: # 新式类必须至少有一个基类
# 	def infor(self):
# 		print("This is a car")
# # 定义好之后 实例化对象 "对象名.成员"来访问
# car = Car()
# car.infor()

# print(isinstance(car, Car))

# class A:
# 	pass
# def demo():
# 	pass
# if 5 > 3:
# 	pass

# # 在类的实例方法中访问实例属性时需要以self为前缀 外部调用不需要
# class A:
# 	def __init__(self,v):
# 		self.value = v
# 	def show(self):
# 		print(self.value)
# a = A('12323')
# a.show()

# # 类成员与实例成员
# import types 

# class Car:
# 	price = 100 # 定义累哦属性
# 	def __init__(self,c):
# 		self.color = c # 定义实例属性

# car1 = Car('Red')
# car2 = Car('Blue')
# print(car1.color,car2.color)
# Car.price = 200 # 修改类属性
# Car.name = 'QQ' # 增加类属性
# car1.color = 'Black' # 修改实例属性
# print(car1.color,Car.price,Car.name)
# print(car2.color,Car.price,Car.name)
# def setSpeed(self, s):
# 	self.speed = s
# car1.setSpeed = types.MethodType(setSpeed, Car) # 动态为对象增加成员方法
# car1.setSpeed(50)
# print(car1.speed)
#----------------------------------------------------------------


#========私有成员与公有成员========================================================
# 
#----------------------------------------------------------------
# 1. _xxx ：保护成员，不能用"from module import *"导入，只有类对象和子对象能访问这些成员
# 2. __xxx__ : 系统定义的特殊成员
# 3. __xxx : 类中的私有成员，只有类对象自己能访问，子类对象也不能访问到这个成员，但在对象外部可以通过"对象名._类名__xxx"来访问
#----------------------------------------------------------------
# class Fruit:
# 	def __init__(self):
# 		self.__color ='Red'
# 		self.price = 1

# apple = Fruit()
# print(apple.price)
# apple.price = 2 # 修改对象公开数据成员的值
# print(apple.price) 
# # 会报错 print(apple.__color) 不能访问对象的私有数据成员
# print(apple.price, apple._Fruit__color)
# apple._Fruit__color = 'Blue' # 修改对象私有数据成员的值
# print(apple.price, apple._Fruit__color)

#----------------------------------------------------------------


#========方法========================================================
# 公有方法 私有方法 静态方法 类方法
# 私有方法的名字以 '__'开始，每个对象都有自己的公有方法和私有方法 可以访问类和对象的成员
# 公有方法通过对象名直接调用 私有方法不能通过对象名直接调用 只能用self调用
# 静态方法和类方法都可以通过类名和对象名调用 但不能直访问属于对象的成员，只能访问属于类的成员
# 一般将cls作为类的第一个参数名称 在调用类方法时不需要为该参数传递值
#----------------------------------------------------------------
# class Root:
# 	__total = 0
# 	def __init__(self, v):
# 		self.__value = v
# 		Root.__total += 1

# 	def show(self):
# 		print('self.__value:',self.__value)
# 		print('Root.__total:',Root.__total)

# 	@ classmethod
# 	def classShowTotal(cls): # 类方法
# 		print(cls.__total)

# 	@ staticmethod
# 	def staticShowTotal(): # 静态方法
# 		print(Root.__total)

# r = Root(3)
# r.classShowTotal() # 通过对象调用类方法

# r.staticShowTotal() # 通过对象调用静态方法

# r.show()

# rr = Root(5)
# Root.classShowTotal() # 通过类名调用类方法
# Root.staticShowTotal() # 通过类名调用静态方法

# # Root.show() 报错 不能通过类名直接调用实例方法

# Root.show(r)
# rr.show()
# Root.show(rr) # 通过类名调用实例方法时为 self参数显示传递对象名
#----------------------------------------------------------------


#========属性========================================================
# 
#----------------------------------------------------------------
# class Test:
# 	def __init__(self, value):
# 		self.__value = value

# 	@property # 只读，无法修改和删除
# 	def value(self):
# 		return self.__value

# t = Test(3)
# print(t.value)
# # t.value = 5 #报错 只读不允许修改值
# t.v = 5 # 动态添加新成员
# print(t.v)

#----------------------------------------------------------------


#=========继承机制=======================================================
"""
	已有的、设计好的类称为父类、基类
	新设计的类称为子类、派生类
	派生类可以继承父类的公有成员，但不能继承其私有成员
	在子类中调用父类的方法，可用super()或“父类名.方法名()”
"""
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------