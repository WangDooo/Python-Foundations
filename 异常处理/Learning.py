#======try...except结构==========================================================
# 
#----------------------------------------------------------------
# while True:
# 	try:
# 		x = int(input("Please enter a number"))
# 		break
# 	except ValueError:
# 		print("That was not a valid number. Try again")
#----------------------------------------------------------------


#=========try...except...else结构=======================================================
# try中代码没有抛出任何异常，则执行else块中的代码
#----------------------------------------------------------------

#----------------------------------------------------------------
# a_list = ['Apple', 'Banana', 'Peach', 'Egg']
# print('输入序号')
# while True:
# 	n = int(input())
# 	try:
# 		print(a_list[n])
# 	except IndexError:
# 		print("下标越界或不正确")
# 	else:
# 		break
#----------------------------------------------------------------


#======带有多个except的try结构==========================================================
# 同一段代码可能会抛出多个异常，需要针对不同的异常类型进行相应的处理
# 一旦某个except捕获了异常，则后面的剩余的except子句将不会执行
#----------------------------------------------------------------
# try:
# 	x = input('输入被除数：')
# 	y = input('输入除数：')
# 	z = float(x) / y
# except ZeroDivisionError:
# 	print("除数不能为0")
# except TypeError:
# 	print("被除数和除数应为数值类型")
# except NameError:
# 	print('变量不存在')
# else:
# 	print(x, '/', y, '=', z)
#----------------------------------------------------------------


#=======try...except...finally结构=========================================================
# 
#----------------------------------------------------------------
# finally子句中的语句都会执行，常用来做一些清理工作以释放try子句中申请的资源
#----------------------------------------------------------------
# try:
# 	3/0
# except:
# 	print(1)
# finally:
# 	print(3)

# try:
# 	f = open('test.txt', 'r')
# 	line = f.readline()
# 	print(line)
# finally:
# 	f.close()

# try:
# 	3/0
# finally:
# 	print(3)

#========断言========================================================
# assert expression[, reason]
# expression为真时，什么都不做；为假，抛出异常
#----------------------------------------------------------------
# try:
# 	assert 1==2, "1 is not equal 2!"
# except AssertionError as reason:
# 	print("%s:%s" %(reason.__class__.__name__, reason))

#----------------------------------------------------------------


#======上下文管理==========================================================
# 上下文管理语句with可以自动管理资源，在代码块执行完毕后自动还原
#----------------------------------------------------------------
# with open('test.txt','r') as f:
# 	for line in f:
# 		print(line)
#----------------------------------------------------------------


#========单元测试========================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------


#================================================================
# 
#----------------------------------------------------------------

#----------------------------------------------------------------